commit 2c7e1037d017d8ab5274e423ae1d84edda4d3ff9
Author: q66 <q66@chimera-linux.org>
Date:   Sat May 18 03:13:13 2024 +0200

    nuke another atomic<shared_ptr>

diff --git a/src/wayland_backend.cpp b/src/wayland_backend.cpp
index a8b0673..83ba712 100644
--- a/src/wayland_backend.cpp
+++ b/src/wayland_backend.cpp
@@ -377,7 +377,8 @@ namespace gamescope
         std::optional<wl_fixed_t> m_ofPendingCursorX;
         std::optional<wl_fixed_t> m_ofPendingCursorY;
 
-        std::atomic<std::shared_ptr<zwp_relative_pointer_v1>> m_pRelativePointer = nullptr;
+        std::mutex m_pRelativePointerMutex;
+        std::shared_ptr<zwp_relative_pointer_v1> m_pRelativePointer = nullptr;
         std::unordered_set<uint32_t> m_uScancodesHeld;
 
         void Wayland_Registry_Global( wl_registry *pRegistry, uint32_t uName, const char *pInterface, uint32_t uVersion );
@@ -2048,6 +2049,7 @@ namespace gamescope
 
     void CWaylandInputThread::SetRelativePointer( bool bRelative )
     {
+        std::lock_guard<std::mutex> g{m_pRelativePointerMutex};
         // This constructors/destructors the display's mutex, so should be safe to do across threads.
         if ( !bRelative )
         {
@@ -2229,8 +2231,11 @@ namespace gamescope
     }
     void CWaylandInputThread::Wayland_Pointer_Motion( wl_pointer *pPointer, uint32_t uTime, wl_fixed_t fSurfaceX, wl_fixed_t fSurfaceY )
     {
-        if ( m_pRelativePointer.load() != nullptr )
-            return;
+        {
+            std::lock_guard<std::mutex> g{m_pRelativePointerMutex};
+            if ( m_pRelativePointer != nullptr )
+                return;
+        }
 
         if ( !cv_wayland_mouse_warp_without_keyboard_focus && !m_bKeyboardEntered )
         {

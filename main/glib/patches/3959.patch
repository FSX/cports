From 1bb5661198cd81d73c60ff0583579edaf7f536a3 Mon Sep 17 00:00:00 2001
From: Thomas Haller <thaller@redhat.com>
Date: Mon, 18 Mar 2024 07:49:52 +0100
Subject: [PATCH 1/3] gobject: fix racy assertion for toggle-refs

We can only assert for having one toggle reference, after we confirmed
(under lock) that the ref count was in the toggle case.

Otherwise, if another thread refs/unrefs the object, we can hit a wrong
g_critical() assertion about

  if (tstackptr->n_toggle_refs != 1)
    {
      g_critical ("Unexpected number of toggle-refs. g_object_add_toggle_ref() must be paired with g_object_remove_toggle_ref()");

Fixes: 9ae43169cfe0 ('gobject: fix race in toggle ref during g_object_ref()')
---
 gobject/gobject.c | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/gobject/gobject.c b/gobject/gobject.c
index 7ec5902b6e..e347400a04 100644
--- a/gobject/gobject.c
+++ b/gobject/gobject.c
@@ -4152,9 +4152,10 @@ retry:
 
       /* With ref count 1, check whether we need to emit a toggle notification. */
       object_bit_lock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
-      toggle_notify = toggle_refs_get_notify_unlocked (object, &toggle_data);
       do_retry = !g_atomic_int_compare_and_exchange_full ((int *) &object->ref_count,
                                                           old_ref, old_ref + 1, &old_ref);
+      if (!do_retry)
+        toggle_notify = toggle_refs_get_notify_unlocked (object, &toggle_data);
       object_bit_unlock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
       if (do_retry)
         goto retry;
@@ -4332,8 +4333,6 @@ retry_beginning:
 
       object_bit_lock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
 
-      toggle_notify = toggle_refs_get_notify_unlocked (object, &toggle_data);
-
       if (!g_atomic_int_compare_and_exchange_full ((int *) &object->ref_count,
                                                    old_ref, old_ref - 1, &old_ref))
         {
@@ -4341,6 +4340,7 @@ retry_beginning:
           goto retry_beginning;
         }
 
+      toggle_notify = toggle_refs_get_notify_unlocked (object, &toggle_data);
       object_bit_unlock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
 
       /* Beware: object might be a dangling pointer. */
@@ -4426,10 +4426,11 @@ retry_decrement:
        *
        * In that case, we need a lock to get the toggle notification. */
       object_bit_lock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
-      toggle_notify = toggle_refs_get_notify_unlocked (object, &toggle_data);
       do_retry = !g_atomic_int_compare_and_exchange_full ((int *) &object->ref_count,
                                                           old_ref, old_ref - 1,
                                                           &old_ref);
+      if (!do_retry)
+        toggle_notify = toggle_refs_get_notify_unlocked (object, &toggle_data);
       object_bit_unlock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
 
       if (do_retry)
-- 
GitLab


From f17cfcf930da77ea35bbafe5f7a07e813f329ebf Mon Sep 17 00:00:00 2001
From: Thomas Haller <thaller@redhat.com>
Date: Tue, 30 Jan 2024 12:29:05 +0100
Subject: [PATCH 2/3] gobject: extract duplicate code for toggle reference in
 g_object_unref()

Move comment logic to one place. Add toggle_refs_check_and_ref_or_deref().
---
 gobject/gobject.c | 89 ++++++++++++++++++++++++-----------------------
 1 file changed, 46 insertions(+), 43 deletions(-)

diff --git a/gobject/gobject.c b/gobject/gobject.c
index e347400a04..1e8d0a9505 100644
--- a/gobject/gobject.c
+++ b/gobject/gobject.c
@@ -3949,25 +3949,54 @@ typedef struct {
   } toggle_refs[1];  /* flexible array */
 } ToggleRefStack;
 
-static GToggleNotify
-toggle_refs_get_notify_unlocked (GObject *object,
-                                 gpointer *out_data)
-{
-  ToggleRefStack *tstackptr;
+G_ALWAYS_INLINE static inline gboolean
+toggle_refs_check_and_ref_or_deref (GObject *object,
+                                    gboolean is_ref,
+                                    gint *old_ref,
+                                    GToggleNotify *toggle_notify,
+                                    gpointer *toggle_data)
+{
+  const gint ref_curr = is_ref ? 1 : 2;
+  const gint ref_next = is_ref ? 2 : 1;
+  gboolean success;
 
-  if (!OBJECT_HAS_TOGGLE_REF (object))
-    return NULL;
+#if G_ENABLE_DEBUG
+  g_assert (ref_curr == *old_ref);
+#endif
+
+  *toggle_notify = NULL;
+  *toggle_data = NULL;
+
+  object_bit_lock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
+
+  /* @old_ref is mainly an (out) parameter. On failure to compare-and-exchange,
+   * we MUST return the new value which the caller will use for retry.*/
 
-  tstackptr = g_datalist_id_get_data (&object->qdata, quark_toggle_refs);
+  success = g_atomic_int_compare_and_exchange_full ((int *) &object->ref_count,
+                                                    ref_curr,
+                                                    ref_next,
+                                                    old_ref);
 
-  if (tstackptr->n_toggle_refs != 1)
+  if (success && OBJECT_HAS_TOGGLE_REF (object))
     {
-      g_critical ("Unexpected number of toggle-refs. g_object_add_toggle_ref() must be paired with g_object_remove_toggle_ref()");
-      return NULL;
+      ToggleRefStack *tstackptr;
+
+      tstackptr = g_datalist_id_get_data (&object->qdata, quark_toggle_refs);
+
+      if (tstackptr->n_toggle_refs != 1)
+        {
+          g_critical ("Unexpected number of toggle-refs. g_object_add_toggle_ref() must be paired with g_object_remove_toggle_ref()");
+        }
+      else
+        {
+          *toggle_notify = tstackptr->toggle_refs[0].notify;
+          *toggle_data = tstackptr->toggle_refs[0].data;
+        }
     }
 
-  *out_data = tstackptr->toggle_refs[0].data;
-  return tstackptr->toggle_refs[0].notify;
+  object_bit_unlock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
+
+  return success;
 }
 
 /**
@@ -4148,16 +4177,8 @@ retry:
     }
   else if (old_ref == 1)
     {
-      gboolean do_retry;
-
       /* With ref count 1, check whether we need to emit a toggle notification. */
-      object_bit_lock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
-      do_retry = !g_atomic_int_compare_and_exchange_full ((int *) &object->ref_count,
-                                                          old_ref, old_ref + 1, &old_ref);
-      if (!do_retry)
-        toggle_notify = toggle_refs_get_notify_unlocked (object, &toggle_data);
-      object_bit_unlock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
-      if (do_retry)
+      if (!toggle_refs_check_and_ref_or_deref (object, TRUE, &old_ref, &toggle_notify, &toggle_data))
         goto retry;
     }
   else
@@ -4282,7 +4303,6 @@ g_object_unref (gpointer _object)
   GToggleNotify toggle_notify;
   gpointer toggle_data;
   GObjectNotifyQueue *nqueue;
-  gboolean do_retry;
   GType obj_gtype;
 
   g_return_if_fail (G_IS_OBJECT (object));
@@ -4331,17 +4351,8 @@ retry_beginning:
        *
        * We need to take a lock, to avoid races. */
 
-      object_bit_lock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
-
-      if (!g_atomic_int_compare_and_exchange_full ((int *) &object->ref_count,
-                                                   old_ref, old_ref - 1, &old_ref))
-        {
-          object_bit_unlock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
-          goto retry_beginning;
-        }
-
-      toggle_notify = toggle_refs_get_notify_unlocked (object, &toggle_data);
-      object_bit_unlock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
+      if (!toggle_refs_check_and_ref_or_deref (object, FALSE, &old_ref, &toggle_notify, &toggle_data))
+        goto retry_beginning;
 
       /* Beware: object might be a dangling pointer. */
       TRACE (GOBJECT_OBJECT_UNREF (object, obj_gtype, old_ref));
@@ -4425,15 +4436,7 @@ retry_decrement:
        * notification. Take a lock and check for that.
        *
        * In that case, we need a lock to get the toggle notification. */
-      object_bit_lock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
-      do_retry = !g_atomic_int_compare_and_exchange_full ((int *) &object->ref_count,
-                                                          old_ref, old_ref - 1,
-                                                          &old_ref);
-      if (!do_retry)
-        toggle_notify = toggle_refs_get_notify_unlocked (object, &toggle_data);
-      object_bit_unlock (object, OPTIONAL_BIT_LOCK_TOGGLE_REFS);
-
-      if (do_retry)
+      if (!toggle_refs_check_and_ref_or_deref (object, FALSE, &old_ref, &toggle_notify, &toggle_data))
         goto retry_decrement;
 
       /* Beware: object might be a dangling pointer. */
-- 
GitLab


From 1b298d1db11afb125f8ccb17192ef99bb80ab47e Mon Sep 17 00:00:00 2001
From: Thomas Haller <thaller@redhat.com>
Date: Tue, 30 Jan 2024 12:29:05 +0100
Subject: [PATCH 3/3] gobject: add code comment about unlock and
 toggle_refs_check_and_ref_or_deref()

It may not be obvious, but the moment unlock is called, the locker
instance may be destroyed.

See g_object_unref(), which calls toggle_refs_check_and_ref_or_deref().
It will check for toggle references while dropping the ref count from 2
to 1.  It must decrement the ref count while holding the lock, but it
also must still unlock afterwards.

Note that the locker instance is on the object itself. Once we decrement
the ref count we give up our reference and another thread may race
against destroying the object. We thus must not touch object anymore.
How can we then still unlock?

This works correctly because:

- unlock operations must not touch the locker instance after unlocking.

- assume that another thread races g_object_unref() to destroy the
  object, while we are about to call object_bit_unlock() in
  toggle_refs_check_and_ref_or_deref(). Then that other thread will also
  need to acquire the same lock (during g_object_notify_queue_freeze()).
  It thus is blocked to destroy the object.

Add code comments about that.
---
 glib/gbitlock.c   |  8 ++++++++
 gobject/gobject.c | 21 +++++++++++++++++++++
 2 files changed, 29 insertions(+)

diff --git a/glib/gbitlock.c b/glib/gbitlock.c
index f96cae4766..900897517e 100644
--- a/glib/gbitlock.c
+++ b/glib/gbitlock.c
@@ -342,6 +342,10 @@ g_bit_unlock (volatile gint *address,
   g_atomic_int_and (address_nonvolatile, ~mask);
 #endif
 
+  /* Warning: unlocking may allow another thread to proceed and destroy the
+   * memory that @address points to. We thus must not dereference it anymore.
+   */
+
   {
     guint class = bit_lock_contended_class (address_nonvolatile);
 
@@ -599,6 +603,10 @@ void
     g_atomic_pointer_and (pointer_address, ~mask);
 #endif
 
+    /* Warning: unlocking may allow another thread to proceed and destroy the
+     * memory that @address points to. We thus must not dereference it anymore.
+     */
+
     {
       guint class = bit_lock_contended_class (address_nonvolatile);
 
diff --git a/gobject/gobject.c b/gobject/gobject.c
index 1e8d0a9505..9ebe362ce8 100644
--- a/gobject/gobject.c
+++ b/gobject/gobject.c
@@ -644,6 +644,9 @@ object_bit_unlock (GObject *object, guint lock_bit)
   _object_bit_is_locked = 0;
 #endif
 
+  /* Warning: after unlock, @object may be a dangling pointer (destroyed on
+   * another thread) and must not be touched anymore. */
+
   g_bit_unlock ((gint *) object_get_optional_flags_p (object), _OPTIONAL_BIT_LOCK);
 }
 
@@ -3977,6 +3980,20 @@ toggle_refs_check_and_ref_or_deref (GObject *object,
                                                     ref_next,
                                                     old_ref);
 
+  /* Note that if we are called during g_object_unref (@is_ref set to FALSE),
+   * then we drop the ref count from 2 to 1 and give up our reference. We thus
+   * no longer hold a strong reference and another thread may race against
+   * destroying the object.
+   *
+   * After this point with is_ref=FALSE and success=TRUE, @object must no
+   * longer be accessed.
+   *
+   * The exception is here. While we still hold the object lock, we know that
+   * @object could not be destroyed, because g_object_unref() also needs to
+   * acquire the same lock during g_object_notify_queue_freeze(). Thus, we know
+   * object cannot yet be destroyed and we can access it until the unlock
+   * below. */
+
   if (success && OBJECT_HAS_TOGGLE_REF (object))
     {
       ToggleRefStack *tstackptr;
@@ -4385,6 +4402,10 @@ retry_beginning:
    * notifications. If the instance gets through to finalize(), the
    * notification queue gets automatically drained when g_object_finalize() is
    * reached and the qdata is cleared.
+   *
+   * Important: Note that g_object_notify_queue_freeze() takes a object_bit_lock(),
+   * which happens to be the same lock that is also taken by toggle_refs_check_and_ref(),
+   * that is very important. See also the code comment in toggle_refs_check_and_ref().
    */
   nqueue = g_object_notify_queue_freeze (object);
 
-- 
GitLab


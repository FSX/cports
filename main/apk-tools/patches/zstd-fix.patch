From a74d15843ece1a292687d97066daa92cc9cba4ab Mon Sep 17 00:00:00 2001
From: q66 <q66@chimera-linux.org>
Date: Sun, 24 Mar 2024 02:55:09 +0100
Subject: [PATCH] zstd: clean up and fix extraction

The original logic was somewhat wrong. We should not be trying
to repeatedly decompress the stream with the same input, as there
is no guarantee it will safely advance the input all the way.

Instead, we should call it once and then ask for more input if
it has been advanced to the end. Regardless, we should return
when the output buffer has been filled, and keep trying to get
more input every time; zstd will eventually advance the input
buffer so that we either get satisfactory data, an EOF, or an
error.

While at it, handle another edge case. The extraction generally
works without it but just for robustness and to match what the
documentation is saying; if decompressStream fully fills in an
output buffer, there may be more data internally, so save that
state and next time try getting that data to return it even if
we get an EOF from the stream.

If an output buffer is filled only partially, it means zstd has
processed everything. In this case, this generally means an end
of file, so the input buffer will have been fully advanced and
we get an EOF from the wrapped stream on next iteration; since
we got *some* data, we disregard this EOF and return the data.
---
 src/io_zstd.c | 56 +++++++++++++++++++++++++++++++--------------------
 1 file changed, 34 insertions(+), 22 deletions(-)

diff --git a/src/io_zstd.c b/src/io_zstd.c
index c25b4a4..ea3969e 100644
--- a/src/io_zstd.c
+++ b/src/io_zstd.c
@@ -24,6 +24,7 @@ struct apk_zstd_istream {
 	void *buf_in;
 	size_t buf_insize;
 	ZSTD_inBuffer inp;
+	int flush;
 };
 
 static void zi_get_meta(struct apk_istream *input, struct apk_file_meta *meta)
@@ -35,39 +36,49 @@ static void zi_get_meta(struct apk_istream *input, struct apk_file_meta *meta)
 static ssize_t zi_read(struct apk_istream *input, void *ptr, size_t size)
 {
 	struct apk_zstd_istream *is = container_of(input, struct apk_zstd_istream, is);
-	uint8_t *cptr = ptr;
+	ZSTD_outBuffer outp;
 
-	while (size) {
-		/* read next chunk */
-		if (is->inp.pos == 0 || is->inp.pos >= is->inp.size) {
+	outp.dst = ptr;
+	outp.pos = 0;
+	outp.size = size;
+
+	while (outp.pos < outp.size) {
+		size_t zr;
+		if (is->inp.pos >= is->inp.size) {
 			ssize_t rs = apk_istream_read_max(is->input, is->buf_in, is->buf_insize);
 			if (rs < 0) {
 				is->is.err = rs;
-				goto ret;
-			} else if (rs == 0) {
-				/* eof */
-				is->is.err = 1;
-				goto ret;
+				return outp.pos;
+			} else if (rs == 0 && is->flush == 0) {
+				/* eof but only if we haven't read anything */
+				if (outp.pos == 0) is->is.err = 1;
+				return outp.pos;
+			} else if (rs) {
+				/* got proper input, disregard flush case */
+				is->flush = 0;
 			}
 			is->inp.size = rs;
 			is->inp.pos = 0;
 		}
-		while (is->inp.pos < is->inp.size) {
-			ZSTD_outBuffer outp = {cptr, size, 0};
-			size_t ret = ZSTD_decompressStream(is->ctx, &outp, &is->inp);
-			if (ZSTD_isError(ret)) {
-				is->is.err = -EIO;
-				goto ret;
-			}
-			cptr += outp.pos;
-			size -= outp.pos;
-			/* no more space in the buffer; leave the rest for next time */
-			if (!size) goto ret;
+		zr = ZSTD_decompressStream(is->ctx, &outp, &is->inp);
+		if (ZSTD_isError(zr)) {
+			is->is.err = -EIO;
+			return outp.pos;
+		}
+		if (is->flush != 0) {
+			is->flush = 0;
+			/* set EOF if there wasn't antyhing left */
+			if (outp.pos == 0) is->is.err = 1;
+			break;
 		}
 	}
 
-ret:
-	return cptr - (uint8_t *)ptr;
+	/* if set, next run should try decompress again, even on eof; this
+	 * is because there might still be data in the internal buffers as
+	 * mentioned in the zstd documentation
+	 */
+	if (outp.pos == outp.size) is->flush = 1;
+	return outp.pos;
 }
 
 static int zi_close(struct apk_istream *input)
@@ -103,6 +114,7 @@ struct apk_istream *apk_istream_zstd(struct apk_istream *input)
 	is->buf_insize = buf_insize;
 	is->inp.size = is->inp.pos = 0;
 	is->inp.src = is->buf_in;
+	is->flush = 0;
 
 	if ((is->ctx = ZSTD_createDCtx()) == NULL) {
 		free(is);
-- 
2.44.0

